1) Write a program in GO language to create an interface and display its values with the help of type 
assertion
package main
import (
"fmt"
)
type Shape interface {
Area() float64
}
// Define a struct for Circle
type Circle struct {
Radius float64
}
func (c Circle) Area() float64 {
return 3.14 * c.Radius * c.Radius
}
type Rectangle struct {
Width float64
Height float64
}
func (r Rectangle) Area() float64 {
return r.Width * r.Height
}
func main() {
shapes := []Shape{
Circle{Radius: 5},
Rectangle{Width: 4, Height: 3},
Circle{Radius: 7},
}
for _, shape := range shapes {
switch s := shape.(type) {
case Circle:
fmt.Printf("Circle - Area: %.2f\n", s.Area())
case Rectangle:
fmt.Printf("Rectangle - Area: %.2f\n", s.Area())
}
}
}

 Write a program in GO language to read and write Fibonacci
series to the using channel.

package main

import "fmt"

// Function to generate Fibonacci series
func fibonacci(ch chan<- int, n int) {
	a, b := 0, 1
	for i := 0; i < n; i++ {
		ch <- a
		a, b = b, a+b
	}
	close(ch)
}

// Function to read and print Fibonacci series from a channel
func readFibonacci(ch <-chan int) {
	for num := range ch {
		fmt.Println(num)
	}
}

func main() {
	// Create channels
	fibonacciChannel := make(chan int)
	resultChannel := make(chan int)

	// Generate Fibonacci series concurrently and write to the channel
	go fibonacci(fibonacciChannel, 10)

	// Read Fibonacci series from channel and print
	go readFibonacci(fibonacciChannel)

	// Block until all Fibonacci numbers are read
	<-fibonacciChannel
}
